# This is based on https://stackoverflow.com/questions/64644641/give-all-users-of-an-aws-account-access-to-an-eks-cluster
# Hum... I should write a security notice when time to do polished docs
# view should allow -o yaml
# if someone's following bad practices and hard coding credentials in kube yaml,
# rather than referencing a kube secret, then privilege escalation might be possible.
# So this does represent removing a layer of defense in favor of UX.
# That layer of defense is meant to protect against intuitively bad practice, so it's a reasonable trade off.
###
# Note: the built in "view" ClusterRole is insufficient, by itself
# as it misses EKS CRs and newer kubernetes features.
# Per https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles
# It can be extended to fill the gaps by using with Aggregated ClusterRoles
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding # <-- apply rights to all namespaces
metadata:
  name: easyeks-all-authenticated-users-viewer
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated #<-- TO DO: Research details of what this means
# ^--concern: external aws accounts? or aws-auth cm authorized accounts? (would be ok if so, need validate)
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole 
  name: view #<-- acts as an aggregation role
---
# Note: The following are purposefully NOT allowed to prevent privilege escalation
# view rights can't be used to:
# - view secrets
# - kubectl exec -it
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: easyeks-enhanced-viewer
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true" #<-- this will get merged into the "view" clusterrole
rules:
- apiGroups: [""]
  verbs: ["get", "list", "watch"]
  resources:
  - podtemplates
  - nodes
  - persistentvolumes
- apiGroups: ["scheduling.k8s.io"]
  verbs: ["get", "list", "watch"]
  resources:
  - priorityclasses
- apiGroups: ["apiregistration.k8s.io"]
  verbs: ["get", "list", "watch"]
  resources:
  - apiservices
- apiGroups: ["coordination.k8s.io"]
  verbs: ["get", "list", "watch"]
  resources:
  - leases
- apiGroups: ["node.k8s.io"]
  verbs: ["get", "list", "watch"]
  resources:
  - runtimeclasses
- apiGroups: ["flowcontrol.apiserver.k8s.io"]
  verbs: ["get", "list", "watch"]
  resources:
  - flowschemas
  - prioritylevelconfigurations
- apiGroups: ["networking.k8s.io"]
  verbs: ["get", "list", "watch"]
  resources:
  - ingressclasses
- apiGroups: ["storage.k8s.io"]
  verbs: ["get", "list", "watch"]
  resources:
  - storageclasses
  - volumeattachments
  - csidrivers
  - csinodes
  - csistoragecapacities
- apiGroups: ["rbac.authorization.k8s.io"]
  verbs: ["get", "list", "watch"]
  resources:
  - clusterroles
  - clusterrolebindings
  - roles
  - rolebindings
- apiGroups: ["apiextensions.k8s.io"]
  verbs: ["get", "list", "watch"]
  resources:
  - customresourcedefinitions
- apiGroups: ["admissionregistration.k8s.io"]
  verbs: ["get", "list", "watch"]
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
