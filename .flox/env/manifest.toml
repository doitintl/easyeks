version = 1  # Visit flox.dev/docs/concepts/manifest/

[install]    # (List of packages installed in environment)
aws = { pkg-path = "awscli2", version = "2.26.4" }
aws_cdk_dependency_ts = { pkg-path = "typescript", version = "5.8.2" }
aws_cdk_dependency_nodejs = { pkg-path = "nodejs", version = "22.14.0" } #(v22 = LTS, long term support)
cdk = { pkg-path = "nodePackages.aws-cdk", version = "2.1004.0", pkg-group = "aws-cdk" } 
jq = { pkg-path = "jq", version = "1.7.1" }
# Note: pkg-group isolates dependencies to prevent conflict
# Note: a cdk specific NixOS pgk bug exists https://github.com/NixOS/nixpkgs/issues/236151
# cdk init app --language typescript
# ^-- fails, workaround--v 
# npx aws-cdk@2.1004.0 init app --language typescript

# If there's ever a need to update pinned versions of above dependencies in the future
# cd to the root of this git repo (where /.flox/ exists)
# Then run the following commands to see available versions
# flox show awscli2 
# flox show typescript
# flox show nodejs
# flox show nodePackages.aws-cdk
# flox show jq
##################################################################################



##################################################################################
# HERE BE STANDARD BOILER PLATE (Ignore stuff further down --v)
##################################################################################

# Set environment variables in the `[vars]` section. These variables may not
# reference one another, and are added to the environment without first
# expanding them. They are available for use in the `[profile]` and `[hook]`
# scripts.
[vars]
# message = "Howdy"

# The `hook.on-activate` script is run by the *bash* shell immediately upon
# activating an environment, and will not be invoked if Flox detects that the
# environment has previously been activated. Variables set by the script will
# be inherited by `[profile]` scripts defined below. Note that any stdout
# generated by the script will be redirected to stderr.
[hook]
# on-activate = '''
#   # Set variables, create files and directories
#   venv_dir="$(mktemp -d)"
#   export venv_dir
#
#   # Perform initialization steps, e.g. create a python venv
#   python -m venv "$venv_dir"
# '''

# Scripts defined in the `[profile]` section are *sourced* by *your shell* and
# inherit environment variables set in the `[vars]` section and by `[hook]` scripts.
# The `profile.common` script is sourced by all shells and special care should be
# taken to ensure compatibility with all shells, after which exactly one of
# `profile.{bash,fish,tcsh,zsh}` is sourced by the corresponding shell.
[profile]
# common = '''
#   echo "it's gettin' flox in here"
# '''


[options] # Additional options can be set here
systems = ["aarch64-darwin", "aarch64-linux", "x86_64-darwin", "x86_64-linux"]
